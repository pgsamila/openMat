#***********************************************************************
#* Copyright (C) 2013 LP-Research
#* All rights reserved.
#* Contact: LP-Research (info@lp-research.com)
#*
#* This file is part of the Open Motion Analysis Toolkit (OpenMAT).
#*
#* Redistribution and use in source and binary forms, with 
#* or without modification, are permitted provided that the 
#* following conditions are met:
#*
#* Redistributions of source code must retain the above copyright 
#* notice, this list of conditions and the following disclaimer.
#* Redistributions in binary form must reproduce the above copyright 
#* notice, this list of conditions and the following disclaimer in 
#* the documentation and/or other materials provided with the 
#* distribution.
#*
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
#* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
#* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#**********************************************************************/

cmake_minimum_required(VERSION 2.4.6)

set(MAJOR_VERSION 1)
set(MINOR_VERSION 3)
set(PATCH_VERSION 4)
set(SO_VERSION    0)

# set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "")
# set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release")

set(CMAKE_BUILD_TYPE "Release")
# set(CMAKE_BUILD_TYPE "Debug")

set(BUILD_ARCHITECTURE "32-bit" CACHE STRING "")
set_property(CACHE BUILD_ARCHITECTURE PROPERTY STRINGS "32-bit" "64-bit")

set(BUILD_OPENSOURCE CACHE BOOL "")
set(USE_JUST_THREAD CACHE BOOL "")

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    project (LpSensor)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    project (LpSensorD)
endif()

if(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
    cmake_policy(SET CMP0015 NEW)
endif(COMMAND cmake_policy)

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	# Windows SDK
    set(WINDOWS_SDK_PATH "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.1A" CACHE STRING "")
	
	# FTDI
    set(WINDOWS_FTDI_PATH "C:/Opt/Ftdi-2.1" CACHE STRING "")
	
	# PCAN-BasicAPI
    set(WINDOWS_PCAN_PATH "C:/Opt/PCAN-BasicAPI" CACHE STRING "")
    include_directories("${WINDOWS_PCAN_PATH}/Include")
	
	# Boost
    set(WINDOWS_BOOST_PATH "C:/Opt/Boost/boost_1_60_0" CACHE STRING "")
    include_directories("${WINDOWS_BOOST_PATH}")
    
	# Pugixml
	set(WINDOWS_PUGIXML_PATH "C:/Opt/pugixml-1.7" CACHE STRING "")
    include_directories("${WINDOWS_PUGIXML_PATH}/src")

	# FTDI
    include_directories("${WINDOWS_FTDI_PATH}")
    if (BUILD_ARCHITECTURE STREQUAL "32-bit")
        link_directories("${WINDOWS_FTDI_PATH}/i386")
        link_directories("${WINDOWS_PCAN_PATH}/Win32/VC_LIB")
        link_directories("${WINDOWS_SDK_PATH}/Lib")
    endif() 

    if (BUILD_ARCHITECTURE STREQUAL "64-bit")
        link_directories("${WINDOWS_FTDI_PATH}/amd64")
        link_directories("${WINDOWS_PCAN_PATH}/x64/VC_LIB")
        link_directories("${WINDOWS_SDK_PATH}/Lib/x64")
    endif()

	# LPSensor
    include_directories("../LpSensor")
	
    if (USE_JUSTTHREAD)
		set(WINDOWS_JUSTTHREAD_PATH "C:/Program Files (x86)/JustSoftwareSolutions/JustThread" CACHE STRING "")
		include_directories("$s{WINDOWS_JUSTTHREAD_PATH}/include")
		link_directories("${WINDOWS_JUSTTHREAD_PATH}/lib")
	endif()
	

    ADD_DEFINITIONS(-DUSE_EIGEN)
    ADD_DEFINITIONS(-DNOMINMAX)
    ADD_DEFINITIONS(-DEIGEN_DONT_ALIGN_STATICALLY)
    ADD_DEFINITIONS(-D_WIN32_WINNT=0x05010200)
    ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
    ADD_DEFINITIONS(-DPLATFORM_X86)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
    ADD_DEFINITIONS(-DDLL_EXPORT)

    if(CMAKE_BUILD_TYPE STREQUAL "Release")
       set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast /O2")
    endif()
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(LINUX_PUGIXML_PATH "/opt/pugixml-1.5" CACHE STRING "")

    include_directories("/usr/local/include")
    include_directories("/usr/include")

    link_directories("/usr/lib")
    link_directories("/usr/local/lib")
    
    include_directories("${LINUX_PUGIXML_PATH}/src")

    include_directories("../LpSensor")

    if (BUILD_ARCHITECTURE STREQUAL "64-bit")
        link_directories("/usr/lib/x86_64-linux-gnu")
    endif()

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -std=gnu++11")
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(sources
        MicroMeasureWindows.cpp
        CanEngine.cpp
        CalibrationData.cpp
        LpmsSensorManager.cpp
        LpmsBBluetooth.cpp
        LpmsCanIo.cpp
        LpmsIoInterface.cpp
        LpmsU.cpp
        LpmsRS232.cpp
        LpmsSensor.cpp
        LpMatrix.c
        RingBuffer.c

        PCANBasicClass.cpp

        LpmsBle2.cpp
        BleEngine.cpp
        BleUart.c
        BleCmdDef.c
        BleCommands.c

        ${WINDOWS_PUGIXML_PATH}/src/pugixml.cpp
    )

    if (BUILD_OPENSOURCE)
        set(sources
            ${sources}
            LpMagnetometerCalibrationOS.c
            LpMagnetometerMAlignmentOS.c
            CalcMisalignmentOS.c
            GaitTrackingOS.cpp
        )
    else()
        set(sources
            ${sources}
            ../../openmat-closedsource/LpMagnetometerCalibration.c
            ../../openmat-closedsource/LpMagnetometerMAlignment.c
            ../../openmat-closedsource/CalcMisalignment.c
            ../../openmat-closedsource/GaitTracking.cpp
        )
    endif()

endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(sources
        CanEngineLinux.cpp
        MicroMeasure.cpp
        CalibrationData.cpp
        LpmsSensorManager.cpp
        LpmsBBluetoothLinux.cpp 
        LpmsCanIoLinux.cpp
        LpmsIoInterface.cpp 
        LpmsU.cpp
        LpmsRS232Linux.cpp
        LpmsSensor.cpp
        LpMatrix.c

        ${LINUX_PUGIXML_PATH}/src/pugixml.cpp
    )

    if (BUILD_OPENSOURCE)
        set(sources
            ${sources}
            LpMagnetometerCalibrationOS.c
            LpMagnetometerMAlignmentOS.c
            CalcMisalignmentOS.c
            GaitTrackingOS.cpp
        )
    else()
        set(sources
            ${sources}
            ../../openmat-closedsource/LpMagnetometerCalibration.c
            ../../openmat-closedsource/LpMagnetometerMAlignment.c
            ../../openmat-closedsource/CalcMisalignment.c
            ../../openmat-closedsource/GaitTracking.cpp
        )
    endif()

endif()
  
set(headers
    DeviceListItem.h
    ImuData.h
    LpmsDefinitions.h
    LpmsSensorI.h
    LpmsSensorManagerI.h
)

if (BUILD_ARCHITECTURE STREQUAL "32-bit")
	set(LIBRARY_OUTPUT_PATH ./ CACHE STRING "")
	set(EXECUTABLE_OUTPUT_PATH ./ CACHE STRING "")
endif()

if (BUILD_ARCHITECTURE STREQUAL "64-bit")
    set(LIBRARY_OUTPUT_PATH ./build/x64 CACHE STRING "")
    set(EXECUTABLE_OUTPUT_PATH ./build/x64 CACHE STRING "")
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if (BUILD_ARCHITECTURE STREQUAL "32-bit")
        if(CMAKE_BUILD_TYPE STREQUAL "Release")
            add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
            target_link_libraries(${CMAKE_PROJECT_NAME} Ws2_32.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} Bthprops.lib Setupapi.lib)

            if (USE_JUSTTHREAD)
                target_link_libraries(${CMAKE_PROJECT_NAME} justthread_vc10_mt.lib)
            endif()
        endif()

        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
            target_link_libraries(${CMAKE_PROJECT_NAME} Ws2_32.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} Bthprops.lib Setupapi.lib)

            if (USE_JUSTTHREAD)
                target_link_libraries(${CMAKE_PROJECT_NAME} justthread_vc10_mtd.lib)
            endif()
        endif()
    endif()

    if (BUILD_ARCHITECTURE STREQUAL "64-bit")
        if(CMAKE_BUILD_TYPE STREQUAL "Release")
            add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
            target_link_libraries(${CMAKE_PROJECT_NAME} Ws2_32.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} Bthprops.lib)
            #target_link_libraries(${CMAKE_PROJECT_NAME} justthreadx64_vc10_mt.lib)
        endif()

        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
            target_link_libraries(${CMAKE_PROJECT_NAME} Ws2_32.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx.lib)
            target_link_libraries(${CMAKE_PROJECT_NAME} Bthprops.lib)
            #target_link_libraries(${CMAKE_PROJECT_NAME} justthreadx64_vc10_mtd.lib)
        endif()
    endif()
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    include(InstallRequiredSystemLibraries)
    SET(CPACK_GENERATOR "DEB")
    SET(CPACK_PACKAGE_NAME "liblpsensor")
    set(CPACK_PACKAGE_VENDOR "LP-Research Inc. <www.lp-research.com>")
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Library for communicating and interfacing with LP-Research sensors.")
    set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/SUMMARY.txt")
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
    set(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
    set(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Huei Ee YAP <yap@lp-research.com>") #required
    
    include(CPack)


    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
        target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx)
        target_link_libraries(${CMAKE_PROJECT_NAME} bluetooth)
    endif()

    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        add_library(${CMAKE_PROJECT_NAME} SHARED ${sources} ${headers})
        target_link_libraries(${CMAKE_PROJECT_NAME} ftd2xx)
        target_link_libraries(${CMAKE_PROJECT_NAME} bluetooth)
    endif()

    install(FILES ${headers} DESTINATION include)

    install(TARGETS ${CMAKE_PROJECT_NAME}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
    )
endif()