// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ImuMonitor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ImuMonitor_h__
#define __ImuMonitor_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ImuDataCommunication
{

class ImuMonitor;

class RawImuMonitor;

}

}

namespace ImuDataCommunication
{

class ImuMonitor;
bool operator==(const ImuMonitor&, const ImuMonitor&);
bool operator<(const ImuMonitor&, const ImuMonitor&);

class RawImuMonitor;
bool operator==(const RawImuMonitor&, const RawImuMonitor&);
bool operator<(const RawImuMonitor&, const RawImuMonitor&);

}

namespace IceInternal
{

::Ice::Object* upCast(::ImuDataCommunication::ImuMonitor*);
::IceProxy::Ice::Object* upCast(::IceProxy::ImuDataCommunication::ImuMonitor*);

::Ice::Object* upCast(::ImuDataCommunication::RawImuMonitor*);
::IceProxy::Ice::Object* upCast(::IceProxy::ImuDataCommunication::RawImuMonitor*);

}

namespace ImuDataCommunication
{

typedef ::IceInternal::Handle< ::ImuDataCommunication::ImuMonitor> ImuMonitorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ImuDataCommunication::ImuMonitor> ImuMonitorPrx;

void __read(::IceInternal::BasicStream*, ImuMonitorPrx&);
void __patch__ImuMonitorPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::ImuDataCommunication::RawImuMonitor> RawImuMonitorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ImuDataCommunication::RawImuMonitor> RawImuMonitorPrx;

void __read(::IceInternal::BasicStream*, RawImuMonitorPrx&);
void __patch__RawImuMonitorPtr(void*, ::Ice::ObjectPtr&);

}

namespace ImuDataCommunication
{

typedef ::std::vector< ::Ice::Float> MatrixSq;

struct OpenMatImuData
{
    ::Ice::Int openMatId;
    ::Ice::Float timestamp;
    ::Ice::Float xAcc;
    ::Ice::Float yAcc;
    ::Ice::Float zAcc;
    ::Ice::Float xGyro;
    ::Ice::Float yGyro;
    ::Ice::Float zGyro;
    ::Ice::Float xMag;
    ::Ice::Float yMag;
    ::Ice::Float zMag;
    ::Ice::Float wQuat;
    ::Ice::Float xQuat;
    ::Ice::Float yQuat;
    ::Ice::Float zQuat;
    ::Ice::Float xEuler;
    ::Ice::Float yEuler;
    ::Ice::Float zEuler;
    ::ImuDataCommunication::MatrixSq rotationM;

    bool operator==(const OpenMatImuData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(openMatId != __rhs.openMatId)
        {
            return false;
        }
        if(timestamp != __rhs.timestamp)
        {
            return false;
        }
        if(xAcc != __rhs.xAcc)
        {
            return false;
        }
        if(yAcc != __rhs.yAcc)
        {
            return false;
        }
        if(zAcc != __rhs.zAcc)
        {
            return false;
        }
        if(xGyro != __rhs.xGyro)
        {
            return false;
        }
        if(yGyro != __rhs.yGyro)
        {
            return false;
        }
        if(zGyro != __rhs.zGyro)
        {
            return false;
        }
        if(xMag != __rhs.xMag)
        {
            return false;
        }
        if(yMag != __rhs.yMag)
        {
            return false;
        }
        if(zMag != __rhs.zMag)
        {
            return false;
        }
        if(wQuat != __rhs.wQuat)
        {
            return false;
        }
        if(xQuat != __rhs.xQuat)
        {
            return false;
        }
        if(yQuat != __rhs.yQuat)
        {
            return false;
        }
        if(zQuat != __rhs.zQuat)
        {
            return false;
        }
        if(xEuler != __rhs.xEuler)
        {
            return false;
        }
        if(yEuler != __rhs.yEuler)
        {
            return false;
        }
        if(zEuler != __rhs.zEuler)
        {
            return false;
        }
        if(rotationM != __rhs.rotationM)
        {
            return false;
        }
        return true;
    }

    bool operator<(const OpenMatImuData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(openMatId < __rhs.openMatId)
        {
            return true;
        }
        else if(__rhs.openMatId < openMatId)
        {
            return false;
        }
        if(timestamp < __rhs.timestamp)
        {
            return true;
        }
        else if(__rhs.timestamp < timestamp)
        {
            return false;
        }
        if(xAcc < __rhs.xAcc)
        {
            return true;
        }
        else if(__rhs.xAcc < xAcc)
        {
            return false;
        }
        if(yAcc < __rhs.yAcc)
        {
            return true;
        }
        else if(__rhs.yAcc < yAcc)
        {
            return false;
        }
        if(zAcc < __rhs.zAcc)
        {
            return true;
        }
        else if(__rhs.zAcc < zAcc)
        {
            return false;
        }
        if(xGyro < __rhs.xGyro)
        {
            return true;
        }
        else if(__rhs.xGyro < xGyro)
        {
            return false;
        }
        if(yGyro < __rhs.yGyro)
        {
            return true;
        }
        else if(__rhs.yGyro < yGyro)
        {
            return false;
        }
        if(zGyro < __rhs.zGyro)
        {
            return true;
        }
        else if(__rhs.zGyro < zGyro)
        {
            return false;
        }
        if(xMag < __rhs.xMag)
        {
            return true;
        }
        else if(__rhs.xMag < xMag)
        {
            return false;
        }
        if(yMag < __rhs.yMag)
        {
            return true;
        }
        else if(__rhs.yMag < yMag)
        {
            return false;
        }
        if(zMag < __rhs.zMag)
        {
            return true;
        }
        else if(__rhs.zMag < zMag)
        {
            return false;
        }
        if(wQuat < __rhs.wQuat)
        {
            return true;
        }
        else if(__rhs.wQuat < wQuat)
        {
            return false;
        }
        if(xQuat < __rhs.xQuat)
        {
            return true;
        }
        else if(__rhs.xQuat < xQuat)
        {
            return false;
        }
        if(yQuat < __rhs.yQuat)
        {
            return true;
        }
        else if(__rhs.yQuat < yQuat)
        {
            return false;
        }
        if(zQuat < __rhs.zQuat)
        {
            return true;
        }
        else if(__rhs.zQuat < zQuat)
        {
            return false;
        }
        if(xEuler < __rhs.xEuler)
        {
            return true;
        }
        else if(__rhs.xEuler < xEuler)
        {
            return false;
        }
        if(yEuler < __rhs.yEuler)
        {
            return true;
        }
        else if(__rhs.yEuler < yEuler)
        {
            return false;
        }
        if(zEuler < __rhs.zEuler)
        {
            return true;
        }
        else if(__rhs.zEuler < zEuler)
        {
            return false;
        }
        if(rotationM < __rhs.rotationM)
        {
            return true;
        }
        else if(__rhs.rotationM < rotationM)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const OpenMatImuData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const OpenMatImuData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const OpenMatImuData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const OpenMatImuData& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct RawImuData
{
    ::Ice::Float timestamp;
    ::Ice::Float xAcc;
    ::Ice::Float yAcc;
    ::Ice::Float zAcc;
    ::Ice::Float xGyro;
    ::Ice::Float yGyro;
    ::Ice::Float zGyro;
    ::Ice::Float xMag;
    ::Ice::Float yMag;
    ::Ice::Float zMag;

    bool operator==(const RawImuData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(timestamp != __rhs.timestamp)
        {
            return false;
        }
        if(xAcc != __rhs.xAcc)
        {
            return false;
        }
        if(yAcc != __rhs.yAcc)
        {
            return false;
        }
        if(zAcc != __rhs.zAcc)
        {
            return false;
        }
        if(xGyro != __rhs.xGyro)
        {
            return false;
        }
        if(yGyro != __rhs.yGyro)
        {
            return false;
        }
        if(zGyro != __rhs.zGyro)
        {
            return false;
        }
        if(xMag != __rhs.xMag)
        {
            return false;
        }
        if(yMag != __rhs.yMag)
        {
            return false;
        }
        if(zMag != __rhs.zMag)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RawImuData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(timestamp < __rhs.timestamp)
        {
            return true;
        }
        else if(__rhs.timestamp < timestamp)
        {
            return false;
        }
        if(xAcc < __rhs.xAcc)
        {
            return true;
        }
        else if(__rhs.xAcc < xAcc)
        {
            return false;
        }
        if(yAcc < __rhs.yAcc)
        {
            return true;
        }
        else if(__rhs.yAcc < yAcc)
        {
            return false;
        }
        if(zAcc < __rhs.zAcc)
        {
            return true;
        }
        else if(__rhs.zAcc < zAcc)
        {
            return false;
        }
        if(xGyro < __rhs.xGyro)
        {
            return true;
        }
        else if(__rhs.xGyro < xGyro)
        {
            return false;
        }
        if(yGyro < __rhs.yGyro)
        {
            return true;
        }
        else if(__rhs.yGyro < yGyro)
        {
            return false;
        }
        if(zGyro < __rhs.zGyro)
        {
            return true;
        }
        else if(__rhs.zGyro < zGyro)
        {
            return false;
        }
        if(xMag < __rhs.xMag)
        {
            return true;
        }
        else if(__rhs.xMag < xMag)
        {
            return false;
        }
        if(yMag < __rhs.yMag)
        {
            return true;
        }
        else if(__rhs.yMag < yMag)
        {
            return false;
        }
        if(zMag < __rhs.zMag)
        {
            return true;
        }
        else if(__rhs.zMag < zMag)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RawImuData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RawImuData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RawImuData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RawImuData& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace ImuDataCommunication
{

class Callback_ImuMonitor_updateImuData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImuMonitor_updateImuData_Base> Callback_ImuMonitor_updateImuDataPtr;

class Callback_RawImuMonitor_updateImuData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RawImuMonitor_updateImuData_Base> Callback_RawImuMonitor_updateImuDataPtr;

}

namespace IceProxy
{

namespace ImuDataCommunication
{

class ImuMonitor : virtual public ::IceProxy::Ice::Object
{
public:

    void updateImuData(const ::ImuDataCommunication::OpenMatImuData& id)
    {
        updateImuData(id, 0);
    }
    void updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::Ice::Context& __ctx)
    {
        updateImuData(id, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id)
    {
        return begin_updateImuData(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::Ice::Context& __ctx)
    {
        return begin_updateImuData(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::ImuDataCommunication::Callback_ImuMonitor_updateImuDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData& id, const ::Ice::Context& __ctx, const ::ImuDataCommunication::Callback_ImuMonitor_updateImuDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, &__ctx, __del, __cookie);
    }

    void end_updateImuData(const ::Ice::AsyncResultPtr&);
    
private:

    void updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ImuMonitor> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImuMonitor*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ImuMonitor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RawImuMonitor : virtual public ::IceProxy::Ice::Object
{
public:

    void updateImuData(const ::ImuDataCommunication::RawImuData& id)
    {
        updateImuData(id, 0);
    }
    void updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::Ice::Context& __ctx)
    {
        updateImuData(id, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id)
    {
        return begin_updateImuData(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::Ice::Context& __ctx)
    {
        return begin_updateImuData(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::ImuDataCommunication::Callback_RawImuMonitor_updateImuDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData& id, const ::Ice::Context& __ctx, const ::ImuDataCommunication::Callback_RawImuMonitor_updateImuDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateImuData(id, &__ctx, __del, __cookie);
    }

    void end_updateImuData(const ::Ice::AsyncResultPtr&);
    
private:

    void updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<RawImuMonitor> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<RawImuMonitor*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<RawImuMonitor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace ImuDataCommunication
{

class ImuMonitor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Context*) = 0;
};

class RawImuMonitor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace ImuDataCommunication
{

class ImuMonitor : virtual public ::IceDelegate::ImuDataCommunication::ImuMonitor,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Context*);
};

class RawImuMonitor : virtual public ::IceDelegate::ImuDataCommunication::RawImuMonitor,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace ImuDataCommunication
{

class ImuMonitor : virtual public ::IceDelegate::ImuDataCommunication::ImuMonitor,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Context*);
};

class RawImuMonitor : virtual public ::IceDelegate::ImuDataCommunication::RawImuMonitor,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Context*);
};

}

}

namespace ImuDataCommunication
{

class ImuMonitor : virtual public ::Ice::Object
{
public:

    typedef ImuMonitorPrx ProxyType;
    typedef ImuMonitorPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void updateImuData(const ::ImuDataCommunication::OpenMatImuData&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateImuData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ImuMonitor& l, const ImuMonitor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImuMonitor& l, const ImuMonitor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RawImuMonitor : virtual public ::Ice::Object
{
public:

    typedef RawImuMonitorPrx ProxyType;
    typedef RawImuMonitorPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void updateImuData(const ::ImuDataCommunication::RawImuData&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateImuData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const RawImuMonitor& l, const RawImuMonitor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RawImuMonitor& l, const RawImuMonitor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ImuDataCommunication
{

template<class T>
class CallbackNC_ImuMonitor_updateImuData : public Callback_ImuMonitor_updateImuData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ImuMonitor_updateImuData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImuMonitor_updateImuData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImuMonitor_updateImuData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImuMonitor_updateImuData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImuMonitor_updateImuData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImuMonitor_updateImuData : public Callback_ImuMonitor_updateImuData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ImuMonitor_updateImuData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImuMonitor_updateImuData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImuMonitor_updateImuData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImuMonitor_updateImuData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImuMonitor_updateImuDataPtr
newCallback_ImuMonitor_updateImuData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImuMonitor_updateImuData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RawImuMonitor_updateImuData : public Callback_RawImuMonitor_updateImuData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RawImuMonitor_updateImuData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RawImuMonitor_updateImuData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RawImuMonitor_updateImuData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RawImuMonitor_updateImuData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RawImuMonitor_updateImuData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RawImuMonitor_updateImuData : public Callback_RawImuMonitor_updateImuData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RawImuMonitor_updateImuData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RawImuMonitor_updateImuData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RawImuMonitor_updateImuData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RawImuMonitor_updateImuData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RawImuMonitor_updateImuDataPtr
newCallback_RawImuMonitor_updateImuData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RawImuMonitor_updateImuData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
